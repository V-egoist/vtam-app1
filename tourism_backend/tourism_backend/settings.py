"""
Django settings for tourism_backend project.

Generated by 'django-admin startproject' using Django 5.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-oge%c*==*a!yc_uw__w*g!8v3rb%kkgu5^&ie3hlaw6fh8!0q_'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'apps.users',
    'rest_framework',
    'graphene_django'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'tourism_backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'tourism_backend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',  # Tells Django to use MySQL
        'NAME': 'tourism_db',                  # The database name you created in Step 1
        'USER': 'root',                        # Your MySQL username
        'PASSWORD': 'Kingblackout14?',          # Your MySQL password
        'HOST': '127.0.0.1',                   # Your local machine (where MySQL is running)
        'PORT': '3306',                        # Default port for MySQL (change only if needed)
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
AUTH_USER_MODEL = 'users.User'
# tourism_backend/tourism_backend/settings.py

# ... (rest of the file)

# --------------------------------------------------------------------------
# Django REST Framework (DRF) Configuration
# --------------------------------------------------------------------------
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        # This tells DRF to check for a JWT token in the request header (Bearer <token>)
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        # Session authentication is useful for testing in the browser/Postman
        'rest_framework.authentication.SessionAuthentication', 
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        # Default is to allow all access, we'll refine this later on
        'rest_framework.permissions.AllowAny',
    )
}

# --------------------------------------------------------------------------
# Simple JWT Configuration
# --------------------------------------------------------------------------
from datetime import timedelta

SIMPLE_JWT = {
    # How long the Access Token is valid for (e.g., 5 minutes - short is safer)
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60), 
    # How long the Refresh Token is valid for (e.g., 1 day)
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1), 
    
    # Standard settings for token header and type
    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    
    # Use the username field for authentication
    'USER_ID_FIELD': 'id',
    'USER_AUTHENTICATION_RULE': 'rest_framework_simplejwt.authentication.default_user_authentication_rule',
}

#graphene settings
GRAPHENE = {
    # Point to the root Schema file (we will create this next)
    'SCHEMA': 'tourism_backend.schema.schema', 
    'MIDDLEWARE': (
        # Useful for debugging GraphQL queries in development
        'graphene_django.debug.DjangoDebugMiddleware',
    ),
}